#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechSupportData
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TechSupport")]
	public partial class TechSupportDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSQLCustomer(SQLCustomer instance);
    partial void UpdateSQLCustomer(SQLCustomer instance);
    partial void DeleteSQLCustomer(SQLCustomer instance);
    partial void InsertSQLIncident(SQLIncident instance);
    partial void UpdateSQLIncident(SQLIncident instance);
    partial void DeleteSQLIncident(SQLIncident instance);
    partial void InsertSQLTechnician(SQLTechnician instance);
    partial void UpdateSQLTechnician(SQLTechnician instance);
    partial void DeleteSQLTechnician(SQLTechnician instance);
    #endregion
		
		public TechSupportDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TechSupportDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TechSupportDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TechSupportDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SQLCustomer> SQLCustomers
		{
			get
			{
				return this.GetTable<SQLCustomer>();
			}
		}
		
		public System.Data.Linq.Table<SQLIncident> SQLIncidents
		{
			get
			{
				return this.GetTable<SQLIncident>();
			}
		}
		
		public System.Data.Linq.Table<SQLTechnician> SQLTechnicians
		{
			get
			{
				return this.GetTable<SQLTechnician>();
			}
		}
	}
	
	[Table(Name="dbo.Customers")]
	public partial class SQLCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _Name;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Email;
		
		private EntitySet<SQLIncident> _SQLIncidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public SQLCustomer()
		{
			this._SQLIncidents = new EntitySet<SQLIncident>(new Action<SQLIncident>(this.attach_SQLIncidents), new Action<SQLIncident>(this.detach_SQLIncidents));
			OnCreated();
		}
		
		[Column(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="SQLCustomer_SQLIncident", Storage="_SQLIncidents", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<SQLIncident> SQLIncidents
		{
			get
			{
				return this._SQLIncidents;
			}
			set
			{
				this._SQLIncidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SQLIncidents(SQLIncident entity)
		{
			this.SendPropertyChanging();
			entity.SQLCustomer = this;
		}
		
		private void detach_SQLIncidents(SQLIncident entity)
		{
			this.SendPropertyChanging();
			entity.SQLCustomer = null;
		}
	}
	
	[Table(Name="dbo.Incidents")]
	public partial class SQLIncident : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IncidentID;
		
		private int _CustomerID;
		
		private string _ProductCode;
		
		private System.Nullable<int> _TechID;
		
		private System.DateTime _DateOpened;
		
		private System.Nullable<System.DateTime> _DateClosed;
		
		private string _Title;
		
		private string _Description;
		
		private EntityRef<SQLCustomer> _SQLCustomer;
		
		private EntityRef<SQLTechnician> _SQLTechnician;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncidentIDChanging(int value);
    partial void OnIncidentIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnTechIDChanging(System.Nullable<int> value);
    partial void OnTechIDChanged();
    partial void OnDateOpenedChanging(System.DateTime value);
    partial void OnDateOpenedChanged();
    partial void OnDateClosedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateClosedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SQLIncident()
		{
			this._SQLCustomer = default(EntityRef<SQLCustomer>);
			this._SQLTechnician = default(EntityRef<SQLTechnician>);
			OnCreated();
		}
		
		[Column(Storage="_IncidentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IncidentID
		{
			get
			{
				return this._IncidentID;
			}
			set
			{
				if ((this._IncidentID != value))
				{
					this.OnIncidentIDChanging(value);
					this.SendPropertyChanging();
					this._IncidentID = value;
					this.SendPropertyChanged("IncidentID");
					this.OnIncidentIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._SQLCustomer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCode", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TechID", DbType="Int")]
		public System.Nullable<int> TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					if (this._SQLTechnician.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateOpened", DbType="DateTime NOT NULL")]
		public System.DateTime DateOpened
		{
			get
			{
				return this._DateOpened;
			}
			set
			{
				if ((this._DateOpened != value))
				{
					this.OnDateOpenedChanging(value);
					this.SendPropertyChanging();
					this._DateOpened = value;
					this.SendPropertyChanged("DateOpened");
					this.OnDateOpenedChanged();
				}
			}
		}
		
		[Column(Storage="_DateClosed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateClosed
		{
			get
			{
				return this._DateClosed;
			}
			set
			{
				if ((this._DateClosed != value))
				{
					this.OnDateClosedChanging(value);
					this.SendPropertyChanging();
					this._DateClosed = value;
					this.SendPropertyChanged("DateClosed");
					this.OnDateClosedChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="SQLCustomer_SQLIncident", Storage="_SQLCustomer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public SQLCustomer SQLCustomer
		{
			get
			{
				return this._SQLCustomer.Entity;
			}
			set
			{
				SQLCustomer previousValue = this._SQLCustomer.Entity;
				if (((previousValue != value) 
							|| (this._SQLCustomer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SQLCustomer.Entity = null;
						previousValue.SQLIncidents.Remove(this);
					}
					this._SQLCustomer.Entity = value;
					if ((value != null))
					{
						value.SQLIncidents.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("SQLCustomer");
				}
			}
		}
		
		[Association(Name="SQLTechnician_SQLIncident", Storage="_SQLTechnician", ThisKey="TechID", OtherKey="TechID", IsForeignKey=true, DeleteRule="CASCADE")]
		public SQLTechnician SQLTechnician
		{
			get
			{
				return this._SQLTechnician.Entity;
			}
			set
			{
				SQLTechnician previousValue = this._SQLTechnician.Entity;
				if (((previousValue != value) 
							|| (this._SQLTechnician.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SQLTechnician.Entity = null;
						previousValue.SQLIncidents.Remove(this);
					}
					this._SQLTechnician.Entity = value;
					if ((value != null))
					{
						value.SQLIncidents.Add(this);
						this._TechID = value.TechID;
					}
					else
					{
						this._TechID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SQLTechnician");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Technicians")]
	public partial class SQLTechnician : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechID;
		
		private string _Name;
		
		private string _Email;
		
		private string _Phone;
		
		private EntitySet<SQLIncident> _SQLIncidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public SQLTechnician()
		{
			this._SQLIncidents = new EntitySet<SQLIncident>(new Action<SQLIncident>(this.attach_SQLIncidents), new Action<SQLIncident>(this.detach_SQLIncidents));
			OnCreated();
		}
		
		[Column(Storage="_TechID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Association(Name="SQLTechnician_SQLIncident", Storage="_SQLIncidents", ThisKey="TechID", OtherKey="TechID")]
		public EntitySet<SQLIncident> SQLIncidents
		{
			get
			{
				return this._SQLIncidents;
			}
			set
			{
				this._SQLIncidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SQLIncidents(SQLIncident entity)
		{
			this.SendPropertyChanging();
			entity.SQLTechnician = this;
		}
		
		private void detach_SQLIncidents(SQLIncident entity)
		{
			this.SendPropertyChanging();
			entity.SQLTechnician = null;
		}
	}
}
#pragma warning restore 1591
