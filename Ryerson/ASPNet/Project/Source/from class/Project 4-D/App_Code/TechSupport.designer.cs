#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="TechSupport")]
public partial class TechSupportDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertTechnician(Technician instance);
  partial void UpdateTechnician(Technician instance);
  partial void DeleteTechnician(Technician instance);
  partial void InsertIncidentRecord(IncidentRecord instance);
  partial void UpdateIncidentRecord(IncidentRecord instance);
  partial void DeleteIncidentRecord(IncidentRecord instance);
  #endregion
	
	public TechSupportDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TechSupportConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TechSupportDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TechSupportDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TechSupportDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TechSupportDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Technician> Technicians
	{
		get
		{
			return this.GetTable<Technician>();
		}
	}
	
	public System.Data.Linq.Table<IncidentRecord> IncidentRecords
	{
		get
		{
			return this.GetTable<IncidentRecord>();
		}
	}
}

[Table(Name="dbo.Technicians")]
public partial class Technician : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TechID;
	
	private string _Name;
	
	private string _Email;
	
	private string _Phone;
	
	private EntitySet<IncidentRecord> _IncidentRecords;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechIDChanging(int value);
    partial void OnTechIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
	
	public Technician()
	{
		this._IncidentRecords = new EntitySet<IncidentRecord>(new Action<IncidentRecord>(this.attach_IncidentRecords), new Action<IncidentRecord>(this.detach_IncidentRecords));
		OnCreated();
	}
	
	[Column(Storage="_TechID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TechID
	{
		get
		{
			return this._TechID;
		}
		set
		{
			if ((this._TechID != value))
			{
				this.OnTechIDChanging(value);
				this.SendPropertyChanging();
				this._TechID = value;
				this.SendPropertyChanged("TechID");
				this.OnTechIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Association(Name="Technician_IncidentRecord", Storage="_IncidentRecords", ThisKey="TechID", OtherKey="TechID")]
	public EntitySet<IncidentRecord> IncidentRecords
	{
		get
		{
			return this._IncidentRecords;
		}
		set
		{
			this._IncidentRecords.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_IncidentRecords(IncidentRecord entity)
	{
		this.SendPropertyChanging();
		entity.Technician = this;
	}
	
	private void detach_IncidentRecords(IncidentRecord entity)
	{
		this.SendPropertyChanging();
		entity.Technician = null;
	}
}

[Table(Name="dbo.Incidents")]
public partial class IncidentRecord : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IncidentID;
	
	private int _CustomerID;
	
	private string _ProductCode;
	
	private System.Nullable<int> _TechID;
	
	private System.DateTime _DateOpened;
	
	private System.Nullable<System.DateTime> _DateClosed;
	
	private string _Title;
	
	private string _Description;
	
	private EntityRef<Technician> _Technician;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncidentIDChanging(int value);
    partial void OnIncidentIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnProductCodeChanging(string value);
    partial void OnProductCodeChanged();
    partial void OnTechIDChanging(System.Nullable<int> value);
    partial void OnTechIDChanged();
    partial void OnDateOpenedChanging(System.DateTime value);
    partial void OnDateOpenedChanged();
    partial void OnDateClosedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateClosedChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public IncidentRecord()
	{
		this._Technician = default(EntityRef<Technician>);
		OnCreated();
	}
	
	[Column(Storage="_IncidentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IncidentID
	{
		get
		{
			return this._IncidentID;
		}
		set
		{
			if ((this._IncidentID != value))
			{
				this.OnIncidentIDChanging(value);
				this.SendPropertyChanging();
				this._IncidentID = value;
				this.SendPropertyChanged("IncidentID");
				this.OnIncidentIDChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProductCode", DbType="Char(10) NOT NULL", CanBeNull=false)]
	public string ProductCode
	{
		get
		{
			return this._ProductCode;
		}
		set
		{
			if ((this._ProductCode != value))
			{
				this.OnProductCodeChanging(value);
				this.SendPropertyChanging();
				this._ProductCode = value;
				this.SendPropertyChanged("ProductCode");
				this.OnProductCodeChanged();
			}
		}
	}
	
	[Column(Storage="_TechID", DbType="Int")]
	public System.Nullable<int> TechID
	{
		get
		{
			return this._TechID;
		}
		set
		{
			if ((this._TechID != value))
			{
				if (this._Technician.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTechIDChanging(value);
				this.SendPropertyChanging();
				this._TechID = value;
				this.SendPropertyChanged("TechID");
				this.OnTechIDChanged();
			}
		}
	}
	
	[Column(Storage="_DateOpened", DbType="DateTime NOT NULL")]
	public System.DateTime DateOpened
	{
		get
		{
			return this._DateOpened;
		}
		set
		{
			if ((this._DateOpened != value))
			{
				this.OnDateOpenedChanging(value);
				this.SendPropertyChanging();
				this._DateOpened = value;
				this.SendPropertyChanged("DateOpened");
				this.OnDateOpenedChanged();
			}
		}
	}
	
	[Column(Storage="_DateClosed", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateClosed
	{
		get
		{
			return this._DateClosed;
		}
		set
		{
			if ((this._DateClosed != value))
			{
				this.OnDateClosedChanging(value);
				this.SendPropertyChanging();
				this._DateClosed = value;
				this.SendPropertyChanged("DateClosed");
				this.OnDateClosedChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="Technician_IncidentRecord", Storage="_Technician", ThisKey="TechID", OtherKey="TechID", IsForeignKey=true, DeleteRule="CASCADE")]
	public Technician Technician
	{
		get
		{
			return this._Technician.Entity;
		}
		set
		{
			Technician previousValue = this._Technician.Entity;
			if (((previousValue != value) 
						|| (this._Technician.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Technician.Entity = null;
					previousValue.IncidentRecords.Remove(this);
				}
				this._Technician.Entity = value;
				if ((value != null))
				{
					value.IncidentRecords.Add(this);
					this._TechID = value.TechID;
				}
				else
				{
					this._TechID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Technician");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
